📄 Whitepaper: Brownian Motion Barrier-Hitting Probability in Trading

⸻

1️⃣ Introduction
In quantitative trading, knowing the chance of price hitting your TP before your SL is essential for risk management and sizing. By modeling price as a Brownian motion (continuous random walk), we get a closed-form “barrier-hitting” probability that’s exact, fast, and transparent. RabbitAI embeds this directly into its signal engine.

⸻

2️⃣ Theoretical Background
A simple SDE for asset price S_t (neglecting drift over short horizons) is:

dSₜ = σ·Sₜ·dWₜ  

Around entry E we place two absorbing barriers:
	•	Lower at stop-loss L → “risk_distance” = |E – L|
	•	Upper at take-profit T → “reward_distance” = |T – E|

Under pure Brownian motion, the probability of hitting TP first is:

Pₜₚ = risk_distance  
       —————————  
       risk_distance + reward_distance  

And hitting SL first is simply the complement.

⸻

3️⃣ Why Barrier-Hitting Is Powerful
• Analytic clarity – no Monte Carlo noise, just a division.
• Blazing performance – O(1) per trade.
• Transparent & Auditable – traders see exactly what’s under the hood.
• Expandable – layer in drift, jumps, volatility discounts, etc.

⸻

4️⃣ Volatility & Sharpness Adjustment
Actual markets aren’t constant-vol. We penalize high-ATR regimes with an exponential discount:

# within calculate_tp_sl_probability(...)
P_base = risk_distance / (risk_distance + reward_distance)
atr_ratio = atr / entry
if atr_ratio > expected_atr:
    discount = exp(–(atr_ratio – expected_atr) * sharpness * 10)
else:
    discount = 1.0
P_adj = P_base * discount
return round(P_adj * 100, 2)

• sharpness tunes how steeply high volatility cuts your odds.

⸻

5️⃣ Integration in RabbitAI Engine
	1.	SL/TP generation via ATR- and momentum-based rules
	2.	Compute tp_probability = calculate_tp_sl_probability(entry, sl, tp, atr, direction)
	3.	Boost/penalize overall confidence:

if tp_probability > 90:   confidence += 0.10
elif tp_probability < 50: confidence -= 0.10


	4.	Embed both raw TP% and final confidence in every Discord alert.

⸻

6️⃣ Full Workflow Snippet

entry, sl, tp, _   = calculate_sl_tp(...)
tp_prob            = calculate_tp_sl_probability(entry, sl, tp, atr, direction)
if tp_prob > 90:   confidence += 0.10
elif tp_prob < 50: confidence -= 0.10

message = (
    f"**{symbol}**  Entry:`{entry:.2f}`  SL:`{sl:.2f}`  "
    f"TP:`{tp:.2f}`  TP_Prob:`{tp_prob:.2f}%`  Conf:`{confidence:.2f}`"
)


⸻

7️⃣ Practical Considerations
• Drift (μ) can be added for longer‐term signals via more advanced barrier formulas.
• Non-Gaussian jumps (e.g. Merton, Kou) have known hitting formulas too.
• Backtest calibration of expected_atr and sharpness ensures TP% matches observed win-rates.

⸻

8️⃣ Conclusion
Brownian barrier-hitting gives you an exact, interpretable TP vs. SL probability. RabbitAI enriches it with volatility discounts to deliver a robust “TP probability” feature—empowering risk-adjusted sizing and clearer trade confidence.

⸻

🔗 Further Reading & Code
• Karlin & Taylor, First Course in Stochastic Processes
• Shreve, Stochastic Calculus for Finance II
