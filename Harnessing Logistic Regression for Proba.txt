Harnessing Logistic Regression for Probabilistic Trade Signals

⸻

Introduction

In systematic trading, the holy grail is turning a cacophony of market signals into a single, interpretable metric that tells you “how likely” a trade is to succeed. Rather than issuing binary BUY/SELL flags, we can wrangle multiple technical indicators through a logistic-regression framework to produce a trade-success probability. In this post, we’ll peel back the curtain on the calculate_trade_probability() function, the crown jewel in our codebase, and show you how it fuses ADX, EMA/MACD alignment, AO, CCI, RSI, entropy, multi-timeframe votes and more into a cohesive probabilistic forecast.

⸻

Why Go Probabilistic?

	•	Nuance over binary: A pure BUY/SELL algorithm says “Go,” or “No go.” A probability (e.g. 72 %) allows you to size, scale and risk-manage dynamically.
	•	Risk control: You can throttle position size when the model is less certain and ramp up when confidence is high.
	•	Portfolio construction: Allocating capital by probability smooths P&L and reduces drawdowns compared to equal-weight signals.

⸻

Inside calculate_trade_probability()

At its core, this function implements a logistic regression:
	1.	Normalize your inputs
Each raw indicator (e.g. ADX, RSI, CCI) is scaled to lie roughly between 0 and 1, often by dividing by a fixed reference or using running percentiles.
	2.	Compute a dynamic scaling factor
Rather than treat all regimes equally, we amplify or dampen the non-ADX components based on current trend strength. Concretely, we use
\text{scale} = 1 + (\text{ADX}_\text{norm} - 1)
so stronger trends (high ADX) boost the impact of EMA/MACD, AO, etc., while choppy markets self-dampen.
	3.	Weighted logit

We maintain a dictionary of weights, e.g.:

weights = {
  "adx":       0.20,
  "ema_macd":  0.15,
  "ao":        0.10,
  "cci":       0.05,
  "rsi":       0.10,
  "tf":        0.10,
  "entropy":   0.10,
}

The logit is computed as:

adx_contrib        = weights["adx"] * feats["adx"]
non_adx_sum        = sum(weights[k] * feats[k] for k in feats if k != "adx")
scaled_non_adx     = non_adx_sum * scale
logit             = adx_contrib + scaled_non_adx + bias

where feats is our normalized feature dictionary and bias is a small offset (e.g. 0.1) to calibrate overall skew.

	4.	Sigmoid → probability

Finally,
p = \frac{1}{1 + e^{-\text{logit}}}
converts the unbounded logit into a neatly bounded 0 – 1 probability, which we present as a percentage.

⸻

The Indicator Ensemble

Indicator	Role
ADX	Trend strength (also drives scaling factor)
EMA9 vs EMA21 + MACD	Trend direction & momentum alignment
AO	Short vs long-term momentum crossover
CCI	Cyclical extremes (overbought/oversold)
RSI	Relative strength/extremes
Entropy (20)	Measure of regime predictability
Multi-TF Votes	“Crowd source” across 15 m, 30 m, 1 h, 4 h frames

Each is normalized—so a 50 % RSI becomes 0.5, a MACD difference is scaled by its historical max, etc.—then fed into the logit.

⸻

Dynamic Scaling by Regime

A static weight on, say, MACD can misfire in a whippy market. By scaling all non-ADX terms by
\text{scale} = 1 + (\text{ADX}_{\rm norm} - 1),
we ensure:

	•	High-ADX (trending) → amplify momentum and cycle indicators
	•	Low-ADX (choppy)  → dampen them, forcing the model to lean on more robust signals (e.g. entropy, multi-TF consensus)

⸻

Weights, Bias & Calibration

	•	Weights reflect each indicator’s historical Sharpe or information coefficient.
	•	Bias nudges the model toward a slight bullish or bearish tilt if your backtest results show an asymmetric edge.
	•	Re-training dynamic weights on your own RL training sheet (e.g. via calculate_dynamic_weights()) adapts the model to evolving markets.

⸻

From Logit to Live Trading

	1.	Compute p every minute/15 min.
	2.	Compare to thresholds: e.g. open only if p>60\%.
	3.	Size by p: larger positions when p\to100\%, smaller as p\to50\%.
	4.	Combine with regime gates (ADX floors, volume filters) for additional safety.

⸻

Benefits & Extensions

	•	Interpretability: You can break down the final probability into each indicator’s contribution.
	•	Modularity: Add new features (e.g. sentiment score) by simply extending feats and weights.
	•	Robustness: The sigmoid output naturally saturates near 0/1, preventing runaway convictions.
	•	Extensions:
	•	Replace fixed weights with online learning (update weights via new trade outcomes).
	•	Introduce interaction terms (e.g. RSI×volatility) for non-linear effects.
	•	Swap in a Bayesian logistic regression to capture parameter uncertainty.

⸻

Conclusion

By distilling a broad array of normalized technical signals through a dynamically scaled logistic-regression model, calculate_trade_probability() delivers a single, probabilistic view of trade quality. This not only smooths position sizing and risk controls, but also provides a transparent, extensible framework that can evolve with your dataset—making it one of the most sophisticated formulas in your trading toolkit.
