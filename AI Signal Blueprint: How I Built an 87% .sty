AI Signal Blueprint: How I Built an 87% Win-Rate Algo in 4 Steps

Chapter 1: Cover

Title: AI Signal Blueprint
Subtitle: How I Built an 87% Win-Rate Algo in 4 Steps
Author: Charl Van Zyl
Brand: RabitAI Trading Signals
Website: rabitai.trade

Built for precision. Refined through failure. Driven by AI.

⸻

Chapter 2: Introduction

In early 2023, I became disillusioned with following inconsistent signal groups, low-quality bots, and subjective analyst tweets. Every tool I tried either lacked data depth, failed during volatile conditions, or provided no explanation for its calls. Like many retail traders, I found myself overexposed in chop zones, shaken out by volatility spikes, or reacting late to macro-driven price moves.

I wanted something different. I needed:

	•	A system that didn’t rely on gut feeling
	•	A model that could ingest multiple timeframes and asset classes
	•	A logic engine that adapted to both technicals and news-driven flow

So I built RabitAI.

Over the next 18 months, I architected and engineered an institutional-grade AI signal engine capable of generating actionable, real-time trade signals across equities, crypto, and commodities. RabitAI now delivers 2–5 signals per day with win rates between 70–87%, verified over hundreds of trades.

This book shares the complete blueprint — not just the “what,” but the exact “how.”

You’ll walk away with a deep understanding of how AI, statistical modeling, multi-timeframe feature engineering, and GPT-based reasoning come together to produce high-conviction trades.

⸻

Chapter 3: System Architecture

The RabitAI system is built in modular Python and integrates external APIs, local logic modules, and real-time market data to produce a full-stack signal.

High-Level Data Flow:
	1.	Ingest price data (Capital.com, yFinance fallback)
	2.	Extract technical indicators across 15m, 30m, 1H, 4H
	3.	Calculate features: trend, momentum, volatility, sentiment
	4.	Score each trade using a custom calculate_trade_probability() model
	5.	Validate sentiment match with GPT + News filtering
	6.	Generate HTML + chart output and send via email

Core Technologies Used:
	•	tradingview_ta: Used to extract a wide range of technical indicators
	•	openai: GPT-4 integration for reasoning, sentiment, and rationale
	•	pandas, numpy, scipy, statistics: Core numeric and modeling tools
	•	scikit-learn: Used for lightweight regression and feature scaling
	•	arch: For volatility modeling (GARCH, realized vol)
	•	feedparser, vaderSentiment, newsapi: News and sentiment extraction
	•	smtplib, MIME: Email delivery engine with chart embeds

Modular File Breakdown (simplified):
	•	signals.py: Main runtime script
	•	feature_engineering.py: Technical & statistical feature construction
	•	sentiment.py: VADER/GPT/FinBERT integration
	•	charting.py: Generates trade charts with TP/SL overlays
	•	email_report.py: HTML generator and email sender
	•	execution.py: Optional trading API execution (Capital.com or Alpaca)

This modularity allows quick integration with Discord bots, cron jobs, or execution pipelines.

⸻

Chapter 4: Feature Engineering

Feature engineering is where 80% of the edge is created. Rather than using a few moving averages and RSI values, RabitAI computes a high-dimensional signal vector combining:

Technical Indicators (per timeframe)

For each timeframe (15m, 30m, 1H, 4H), the following are extracted:
	•	RSI
	•	Stochastic RSI
	•	EMA(9), EMA(21)
	•	MACD Histogram
	•	ADX and +DI / -DI
	•	CCI
	•	Bollinger Band %B
	•	MFI (Money Flow Index)
	•	On Balance Volume

Volatility and Structure Features
	•	ATR (Average True Range)
	•	Entropy (Shannon entropy on 20-period log returns)
	•	Bollinger Band width
	•	Realized Volatility vs ATR
	•	Trend strength: ADX scaled and normalized
	•	Slope angle (linear regression over price)

Sample Feature Extraction Function:

import pandas as pd
from ta.volatility import AverageTrueRange
from ta.trend import EMAIndicator, CCIIndicator, ADXIndicator
from ta.momentum import RSIIndicator, StochasticOscillator


def extract_features(df):
    features = {}
    df['ema9'] = EMAIndicator(df['close'], window=9).ema_indicator()
    df['ema21'] = EMAIndicator(df['close'], window=21).ema_indicator()
    df['rsi'] = RSIIndicator(df['close']).rsi()
    df['cci'] = CCIIndicator(df['high'], df['low'], df['close']).cci()
    df['adx'] = ADXIndicator(df['high'], df['low'], df['close']).adx()
    df['atr'] = AverageTrueRange(df['high'], df['low'], df['close']).average_true_range()
    
    features['ema_gap'] = df['ema9'].iloc[-1] - df['ema21'].iloc[-1]
    features['rsi'] = df['rsi'].iloc[-1]
    features['adx'] = df['adx'].iloc[-1]
    features['atr'] = df['atr'].iloc[-1]
    features['cci'] = df['cci'].iloc[-1]

    return features

Normalization and Fusion

All features are normalized using Z-score or min-max scaling. The final feature vector is passed into a logistic regression model or probability function, which we’ll detail in Chapter 6.

The goal: produce a statistically robust signal that works across asset classes and adapts to volatility regimes.

⸻

Chapter 5: Market Regime Detection

One of the core advantages of RabitAI is its ability to detect and adapt to different market regimes. Many systems fail because they apply the same logic across all conditions. RabitAI actively classifies the market as either trending (momentum) or non-trending (mean-reverting) and adjusts its behavior accordingly.

Detection Logic
	1.	Entropy (20): Measures randomness in recent returns. High entropy suggests chop; low entropy implies structure.
	2.	ADX: A rising ADX above 25 combined with directional movement (+DI/-DI) indicates trend strength.
	3.	Realized Volatility vs ATR: If actual volatility diverges from average expected range, the market is unstable.

Strategy Switching
	•	In trending conditions: Favor breakout setups, longer holding periods, higher TP multiples
	•	In mean-reverting zones: Favor short-term trades, tighter SL, or avoid trading altogether

def detect_regime(features):
    if features['entropy'] < 1.0 and features['adx'] > 25:
        return 'momentum'
    elif features['entropy'] > 1.7 and features['adx'] < 20:
        return 'mean-reverting'
    return 'neutral'

This classification feeds into the probability model and SL/TP selection process.

⸻

Chapter 6: Probability Scoring

RabitAI doesn’t just say “buy” or “sell.” It attaches a confidence level to each signal, which governs whether it will be sent or skipped.

Key Components of Probability:
	1.	Logit Model: Feature scores are passed through a logistic function
	2.	ADX Scaling: Stronger trends amplify the probability
	3.	Entropy Filtering: Noisy markets lower the score
	4.	Sentiment Matching: If news sentiment disagrees with technicals, probability is reduced

def calculate_trade_probability(features):
    base = 0.0
    base += 0.3 * (features['ema_gap'])
    base += 0.25 * (features['rsi'] - 50)/50
    base += 0.2 * (features['adx'] / 50)
    base -= 0.15 * features['entropy']

    prob = 1 / (1 + math.exp(-base))
    return prob * 100

Signals below 60% confidence are filtered out. Above 80%, the trade may be auto-executed or prioritized.

⸻

Chapter 7: News & Sentiment Filtering

Markets don’t move on technicals alone. News, events, and global macro context shift sentiment — sometimes violently. RabitAI integrates:
	•	NewsAPI headlines
	•	Capital.com client sentiment API
	•	Fallback sentiment via VADER
	•	GPT-based summary alignment

Workflow:
	1.	Pull 5–10 latest headlines per ticker
	2.	Score using VADER and keyword filters
	3.	Pass into GPT with indicator context
	4.	Compare GPT’s directional response with signal direction
	5.	Penalize probability if mismatch detected

sentiment_score = analyzer.polarity_scores(news_text)['compound']
if sentiment_score < -0.3 and signal == 'BUY':
    confidence *= 0.8

This layer ensures RabitAI doesn’t issue bullish calls during obvious bearish sentiment trends (e.g., layoffs, missed earnings, regulatory threats).

⸻


## Chapter 8: TP/SL Prediction

Setting appropriate Take Profit (TP) and Stop Loss (SL) levels is essential to sustaining profitability. RabitAI avoids static percentage rules in favor of **volatility-aware dynamic SL/TP targeting**.

### Key Components of TP/SL Logic:

1. **ATR (Average True Range)** — used as a volatility proxy
2. **Entropy Regime** — high entropy markets trigger tighter SL
3. **Signal Strength** — high-probability setups use wider TP multipliers
4. **Directional Bias** — upward trends allow longer TP exposure

### Implementation Strategy

* SL = current price - (ATR \* volatility\_multiplier)
* TP = current price + (ATR \* target\_multiplier)

Multipliers are chosen dynamically:

* In trending, low-entropy conditions: TP = 2.5x ATR, SL = 1.2x ATR
* In choppy, high-entropy conditions: TP = 1.5x ATR, SL = 1.0x ATR

```python
def calculate_tp_sl(current_price, atr, regime):
    if regime == 'momentum':
        sl = current_price - atr * 1.2
        tp = current_price + atr * 2.5
    elif regime == 'mean-reverting':
        sl = current_price - atr * 1.0
        tp = current_price + atr * 1.5
    else:
        sl = current_price - atr * 1.1
        tp = current_price + atr * 2.0
    return round(tp, 2), round(sl, 2)
```

These values are embedded into the trade output and directly drawn on the chart report.

---

## Chapter 9: Signal Reasoning with GPT

This is one of RabitAI’s most unique differentiators. Every qualified trade signal is passed through a custom GPT-4 prompt, asking the model to evaluate the trade based on:

* Technical indicators
* Sentiment scores
* Price structure
* Volatility state

### Example Prompt

```python
prompt = f"""
Analyze the following trade setup:
Symbol: {symbol}
Direction: {direction}
Timeframes: 15m, 30m, 1H, 4H
Indicators: {json.dumps(indicator_summary)}
News Headlines: {headline_summary}
Entropy: {entropy}
ATR: {atr}

Should this trade be executed? If yes, why? What risk factors are present?
"""
```

### Output Filtering

RabitAI parses GPT’s response:

* Looks for keywords like “valid”, “confirmation”, “trend aligned”
* Penalizes signals if GPT expresses uncertainty
* Displays GPT summary inside email/trade log

### Example Response (parsed)

> *"Given the strong RSI divergence on 1H and MACD bullish crossover, combined with positive sentiment from recent earnings beats, this trade has solid upside potential. However, ATR indicates moderate volatility — SL should be wider than normal."*

Only signals with **alignment across technicals, sentiment, and GPT summary** are passed forward to the user or execution queue.

This GPT fusion layer adds narrative intelligence that standard bots cannot replicate.

---

### Chapter 10: Trade Report Output

After a signal passes all filters (technical, sentiment, GPT alignment), it is packaged into a polished, user-friendly report. This report is sent via HTML email and optionally posted to Discord or other channels.

What’s in the Report?

	•	Symbol and timeframe breakdown
	•	Entry, SL, TP values
	•	Direction (Buy/Sell)
	•	Confidence score
	•	GPT-generated reasoning summary
	•	Sentiment notes from news
	•	Embedded chart with TP/SL lines and indicators

Email Layout

The email body is rendered as responsive HTML using inline CSS. It includes:
	•	Base64-encoded company logo
	•	Horizontal table with trade details
	•	Embedded image of the trade chart
	•	Tooltip-enabled news sentiment headlines

<table>
  <tr><td><b>Symbol</b></td><td>TSLA</td></tr>
  <tr><td><b>Direction</b></td><td>BUY</td></tr>
  <tr><td><b>Entry</b></td><td>$176.20</td></tr>
  <tr><td><b>TP</b></td><td>$182.60</td></tr>
  <tr><td><b>SL</b></td><td>$172.80</td></tr>
  <tr><td><b>Confidence</b></td><td>84%</td></tr>
</table>

Chart Rendering

Charts are generated using matplotlib, saved to an in-memory buffer, and encoded into Base64:

fig, ax = plt.subplots()
ax.plot(df['close'], label='Price')
ax.axhline(tp, color='green', linestyle='--', label='TP')
ax.axhline(sl, color='red', linestyle='--', label='SL')
...
img_buf = io.BytesIO()
plt.savefig(img_buf, format='png')
img_base64 = base64.b64encode(img_buf.getvalue()).decode()

The result: subscribers get a visually intuitive and information-rich report for every trade.

⸻

### Chapter 11: Portfolio Integration & Risk

Beyond individual signals, RabitAI accounts for portfolio-level risk and exposure by integrating logic for:

	•	Position sizing based on confidence and volatility
	•	Filtering overlapping trades
	•	Avoiding exposure to correlated assets simultaneously

Position Sizing (Dynamic)

Trade size is adjusted using:

	•	Signal probability (scaled by logistic output)
	•	Realized volatility vs historical volatility
	•	Max risk per trade (e.g., 1–2% of portfolio)

def determine_position_size(probability, atr, account_balance):

    risk_pct = min(0.02, probability / 100 * 0.03)
    dollar_risk = account_balance * risk_pct
    position_size = dollar_risk / atr
    return round(position_size, 2)

Trade Filtering

If multiple signals occur on correlated assets (e.g., META, AMZN, AAPL), RabitAI:

	•	Prioritizes highest confidence
	•	Limits trades to 1–2 per sector
	•	Avoids duplication of risk

Portfolio Summary Output

The engine can output a daily digest:

{
  "date": "2025-05-26",
  "total_signals": 4,
  "executed": 2,
  "capital_allocated": "$4,000",
  "estimated_risk": "$120",
  "expected_return": "$360"
}

This layer transforms RabitAI from a signal bot into a portfolio-aware system, suitable for real allocation.

⸻

### Chapter 12: Lessons Learned

Lesson 1: Simplicity Beats Complexity

Initially, the system was over-engineered with ensemble ML models and dozens of signals. I learned to focus on high-impact features like trend strength, volatility behavior, and news alignment — not 50+ indicators.

Lesson 2: GPT Adds Real Value — If Scoped Well

GPT-4 was incredibly powerful, but only when directed through strict, scoped prompts. Letting it “freestyle” added noise. Tight framing and prompt consistency yielded reliable trade justifications.

Lesson 3: Trade Filtering Matters More Than Forecasting

Filtering out bad setups was more important than finding the “perfect” entry. RabitAI’s power comes not from calling every breakout, but from skipping low-confidence, high-risk conditions.

Lesson 4: You Need Portfolio Logic Early

Even with good signals, you can overallocate, get sector-clustered, or stack correlated losses. Adding portfolio exposure rules, volatility caps, and correlation guards improved win/loss outcomes dramatically.

Lesson 5: Users Want Narratives, Not Just Data

The combination of numeric confidence and GPT-generated reasoning created stickiness. Users liked knowing “why” the bot issued a trade — not just “what” to do.

⸻

### Chapter 13: Join the Mission

RabitAI was never meant to be another signal group. It was designed as a scalable, adaptive, institutional-grade signal system built for serious traders — with explainable logic.

Now, it’s available to the public.

You Have Three Options:

	1.	Join our channel: Test daily signals inside our private Discord.
	2.	Subscribe monthly: Get real-time alerts, emailed reports, and Discord access.
	3.	Build your own: Use this blueprint to launch your custom version — apply the logic, adapt the code, or hire us to help implement it for your needs.

Start Here → rabitai.trade

⸻

Appendix A: Source Code Breakdown

All major modules are organized under signals.py or supporting files:

	•	extract_features() → builds feature vector for each ticker
	•	calculate_trade_probability() → core signal scoring logic
	•	calculate_tp_sl() → adaptive volatility-based SL/TP levels
	•	generate_prompt() → formats input for GPT
	•	render_chart() → builds inline visual chart with price, SL, TP
	•	send_email_report() → packages signal + base64 chart into responsive HTML

Additional modules handle Discord integration, file logging, and webhook support.

⸻

Appendix B: API Setup & Environment Configuration

Required Keys (stored in .env):

	•	OPENAI_API_KEY → GPT-4 access
	•	NEWS_API_KEY → NewsAPI.org headlines
	•	EMAIL_USER, EMAIL_PASS → SMTP email
	•	CAPITAL_API_KEY or ALPACA_API_KEY → Live/fallback OHLCV

To load keys:

from dotenv import load_dotenv
load_dotenv('signals_cred.env')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')


⸻

Appendix C: Dataset Sources & Recommended Tools

Datasets:

	•	Yahoo Finance (yfinance) → Historical OHLCV
	•	Capital.com → Real-time OHLCV + sentiment
	•	NewsAPI → Ticker-related headlines

Libraries:

	•	ta, scikit-learn, statsmodels, arch, matplotlib, feedparser, vaderSentiment
	•	openai, dotenv, requests, pandas, numpy, tweepy

⸻

End of Blueprint

For help setting up your own version, joining the RabitAI Discord, or customizing this system for your portfolio, visit rabitai.trade or DM @rabitaitrades on X.

⸻
